(define (domain ad)
(:requirements :universal-preconditions :disjunctive-preconditions :quantified-preconditions)
(:types ;todo: enumerate types and their hierarchy here, e.g. car truck bus - vehicle
    player npc - character
    monster - npc
    location
    item trophy - thing
    consumable weapon - item
    info
)

(:predicates ;todo: define predicates here
    (hasTrack ?loc - location)
    (canTrack ?char - character)
    (haveItem ?char - character ?i - item)
    (atLoc ?char - character ?loc - location)
    (trackInfo ?inf - info ?loc - location ?lair - location)
    (isSus ?char - character)
    (onGround ?i - item ?loc - location)
    (isAvailable ?char - character)
    (isDead ?char - character)
    (isSecret ?omni)
    (isBound ?char - character)
    (knowInfo ?char - character ?inf - info)
    (haveBodyPart ?char - character ?bp - trophy)
    (canCut ?item - item)
)
(:functions
    (total-cost)
)
(:action move
    :parameters (?char - player ?from ?to - location)
    :precondition (and (atLoc ?char ?from) (not (isSecret ?to)) (isAvailable ?char))
    :effect (and (not (atLoc ?char ?from)) (atLoc ?char ?to)
    (increase (total-cost) 2)
    )
)
(:action investigate
    :parameters (?char - character ?inf - info ?loc ?lair - location)
    :precondition (and (atLoc ?char ?loc) (canTrack ?char) (hasTrack ?loc) (trackInfo ?inf ?loc ?lair) (isAvailable ?char) (not (isSecret ?inf)))
    :effect (and (not (isSecret ?lair))
    (increase (total-cost) 2)
    )
)
(:action attack
    :parameters (?char1 - player ?char2 - character ?loc - location)
    :precondition (and (atLoc ?char1 ?loc) (atLoc ?char2 ?loc) (isSus ?char2) (isAvailable ?char1) (not (= ?char1 ?char2)))
    :effect (and (isDead ?char2) (not (isSus ?char2))
    (forall (?i - item) (when (haveItem ?char2 ?i) (and (onGround ?i ?loc) (not (haveItem ?char2 ?i)))))
    (increase (total-cost) 2)
    )
)
(:action bring
    :parameters (?char1 - player ?char2 - character ?from ?to - location)
    :precondition (and (atLoc ?char1 ?from) (atLoc ?char2 ?from) (not (isSecret ?to)) (isAvailable ?char2) (not (= ?char1 ?char2))
                    (or (and (not (isSus ?char2)) (not (isBound ?char2))) (and (isSus ?char2) (isBound ?char2)))
    (exists (?sus - monster) (or (not (atLoc ?sus ?from)) (isDead ?sus)))
    )
    :effect (and (not (atLoc ?char1 ?from)) (atLoc ?char1 ?to) (not (atLoc ?char2 ?from)) (atLoc ?char2 ?to)
    (increase (total-cost) 4)
    )
)
(:action pickup
    :parameters (?char - character ?i - thing ?loc - location)
    :precondition (and (onGround ?i ?loc) (atLoc ?char ?loc) (isAvailable ?char))
    :effect (and (haveItem ?char ?i) (not (onGround ?i ?loc))
    (increase (total-cost) 1)
    )
)
(:action untie
    :parameters (?char1 - player ?char2 - character ?loc - location)
    :precondition (and (atLoc ?char1 ?loc) (atLoc ?char2 ?loc) (isBound ?char2)  (isAvailable ?char1) 
    (exists (?sus - monster) (or (not (atLoc ?sus ?loc)) (isDead ?sus)))
    )
    :effect (and (not (isBound ?char2)) (isAvailable ?char2)
    (increase (total-cost) 1)
    )
)
(:action talk
    :parameters (?char1 - player ?char2 - character ?loc - location ?inf - info)
    :precondition (and (atLoc ?char1 ?loc) (atLoc ?char2 ?loc) (knowInfo ?char2 ?inf) (not (= ?char1 ?char2)))
    :effect (and (not (isSecret ?inf))
    (increase (total-cost) 1)
    )
)
(:action give
    :parameters (?char1 ?char2 - character ?i - thing ?loc - location)
    :precondition (and (atLoc ?char1 ?loc) (atLoc ?char2 ?loc) (haveItem ?char1 ?i) (not (isDead ?char1)) (not (isSus ?char1)) (not (= ?char1 ?char2))) 
    :effect (and (haveItem ?char2 ?i) (not (haveItem ?char1 ?i))
    (increase (total-cost) 2)
    )
)
(:action dismember
    :parameters (?char1 ?char2 - character ?bp - trophy ?loc - location ?blad - item)
    :precondition (and (atLoc ?char1 ?loc) (haveItem ?char1 ?blad) (canCut ?blad) (atLoc ?char2 ?loc) (isAvailable ?char1) (not (= ?char1 ?char2)) (isDead ?char2) (haveBodyPart ?char2 ?bp))
    :effect (and (onGround ?bp ?loc) (not (haveBodyPart ?char ?bp))
    (increase (total-cost) 1)
    )
)
)